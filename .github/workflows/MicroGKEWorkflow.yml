# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Spring Boot/Cloud CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: cluster-demo-1
  GKE_ZONE: us-central1-c

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: 11
        distribution: 'adopt'
        server_id: docker.io
        server_username: MAVEN_USERNAME
        server_password: MAVEN_PASSWORD

    - name: Build and Push with Maven Service Registry Service
      run: mvn package dockerfile:push --file service-registry/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          
    - name: Build and Push with Maven User Service
      run: mvn package dockerfile:push --file userservice/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push with Maven Department Service
      run: mvn package dockerfile:push --file departmentservice/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push with Maven Cloud Config Server Service
      run: mvn package dockerfile:push --file cloud-config-server/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push with Maven Cloud API Gateway Service
      run: mvn package dockerfile:push --file cloud-api-gateway/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  Deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@master
    - name: Kubectl - Google Cloud GKE cluster
      uses: ameydev/gke-kubectl-action@master
      env:
        PROJECT_ID: ${{ env.PROJECT_ID }}
        APPLICATION_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}
        CLUSTER_NAME: ${{ env.GKE_CLUSTER }}
        ZONE_NAME: ${{ env.GKE_ZONE }}
      
      with:
         args: apply -f k8s/
